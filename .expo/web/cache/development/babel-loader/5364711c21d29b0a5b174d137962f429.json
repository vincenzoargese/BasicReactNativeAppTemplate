{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\", \"accessibilityState\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TabBarIcon from \"./TabBarIcon\";\nexport default function BottomTabBarItem(_ref) {\n  var focused = _ref.focused,\n      route = _ref.route,\n      label = _ref.label,\n      icon = _ref.icon,\n      badge = _ref.badge,\n      badgeStyle = _ref.badgeStyle,\n      to = _ref.to,\n      _ref$button = _ref.button,\n      button = _ref$button === void 0 ? function (_ref2) {\n    var children = _ref2.children,\n        style = _ref2.style,\n        _onPress = _ref2.onPress,\n        to = _ref2.to,\n        accessibilityRole = _ref2.accessibilityRole,\n        accessibilityState = _ref2.accessibilityState,\n        rest = _objectWithoutProperties(_ref2, _excluded);\n\n    if (Platform.OS === 'web' && to) {\n      return React.createElement(Link, _extends({}, rest, {\n        to: to,\n        style: [styles.button, style],\n        onPress: function onPress(e) {\n          if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n            e.preventDefault();\n            _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n          }\n        }\n      }), children);\n    } else {\n      return React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n        accessibilityRole: accessibilityRole,\n        accessibilityState: accessibilityState,\n        onPress: _onPress\n      }), React.createElement(View, {\n        style: style\n      }, children));\n    }\n  } : _ref$button,\n      accessibilityLabel = _ref.accessibilityLabel,\n      testID = _ref.testID,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      horizontal = _ref.horizontal,\n      customActiveTintColor = _ref.activeTintColor,\n      customInactiveTintColor = _ref.inactiveTintColor,\n      _ref$activeBackground = _ref.activeBackgroundColor,\n      activeBackgroundColor = _ref$activeBackground === void 0 ? 'transparent' : _ref$activeBackground,\n      _ref$inactiveBackgrou = _ref.inactiveBackgroundColor,\n      inactiveBackgroundColor = _ref$inactiveBackgrou === void 0 ? 'transparent' : _ref$inactiveBackgrou,\n      _ref$showLabel = _ref.showLabel,\n      showLabel = _ref$showLabel === void 0 ? true : _ref$showLabel,\n      allowFontScaling = _ref.allowFontScaling,\n      labelStyle = _ref.labelStyle,\n      iconStyle = _ref.iconStyle,\n      style = _ref.style;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var activeTintColor = customActiveTintColor === undefined ? colors.primary : customActiveTintColor;\n  var inactiveTintColor = customInactiveTintColor === undefined ? Color(colors.text).mix(Color(colors.card), 0.5).hex() : customInactiveTintColor;\n\n  var renderLabel = function renderLabel(_ref3) {\n    var focused = _ref3.focused;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    var color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.label, {\n          color: color\n        }, horizontal ? styles.labelBeside : styles.labelBeneath, labelStyle],\n        allowFontScaling: allowFontScaling\n      }, label);\n    }\n\n    return label({\n      focused: focused,\n      color: color,\n      position: horizontal ? 'beside-icon' : 'below-icon'\n    });\n  };\n\n  var renderIcon = function renderIcon(_ref4) {\n    var focused = _ref4.focused;\n\n    if (icon === undefined) {\n      return null;\n    }\n\n    var activeOpacity = focused ? 1 : 0;\n    var inactiveOpacity = focused ? 0 : 1;\n    return React.createElement(TabBarIcon, {\n      route: route,\n      horizontal: horizontal,\n      badge: badge,\n      badgeStyle: badgeStyle,\n      activeOpacity: activeOpacity,\n      inactiveOpacity: inactiveOpacity,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      renderIcon: icon,\n      style: iconStyle\n    });\n  };\n\n  var scene = {\n    route: route,\n    focused: focused\n  };\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  return button({\n    to: to,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    testID: testID,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityState: {\n      selected: focused\n    },\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [styles.tab, {\n      backgroundColor: backgroundColor\n    }, horizontal ? styles.tabLandscape : styles.tabPortrait, style],\n    children: React.createElement(React.Fragment, null, renderIcon(scene), renderLabel(scene))\n  });\n}\nvar styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column'\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  },\n  labelBeneath: {\n    fontSize: 10\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"sources":["BottomTabItem.tsx"],"names":["button","rest","Platform","styles","e","onPress","style","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","colors","useTheme","customActiveTintColor","customInactiveTintColor","Color","renderLabel","focused","color","horizontal","allowFontScaling","label","position","renderIcon","icon","activeOpacity","inactiveOpacity","iconStyle","scene","route","backgroundColor","to","onLongPress","testID","accessibilityLabel","accessibilityRole","accessibilityState","selected","accessibilityStates","children","tab","flex","alignItems","tabPortrait","justifyContent","flexDirection","tabLandscape","textAlign","labelBeneath","fontSize","labelBeside","marginLeft","marginTop","display"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;;;;;;AAYA,SAAA,IAAA,EAAA,QAAA,QAAA,0BAAA;AACA,OAAA,KAAA,MAAA,OAAA;AAEA,OAAA,UAAA;AA2GA,eAAe,SAAA,gBAAA,OAiEL;EAAA,IAjE+B,OAiE/B,QAjE+B,OAiE/B;EAAA,IAjE+B,KAiE/B,QAjE+B,KAiE/B;EAAA,IAjE+B,KAiE/B,QAjE+B,KAiE/B;EAAA,IAjE+B,IAiE/B,QAjE+B,IAiE/B;EAAA,IAjE+B,KAiE/B,QAjE+B,KAiE/B;EAAA,IAjE+B,UAiE/B,QAjE+B,UAiE/B;EAAA,IAjE+B,EAiE/B,QAjE+B,EAiE/B;EAAA,uBAzDRA,MAyDQ;EAAA,IAzDRA,MAyDQ,4BAzDC,iBAQsB;IAAA,IARrB,QAQqB,SARrB,QAQqB;IAAA,IARrB,KAQqB,SARrB,KAQqB;IAAA,IARrB,QAQqB,SARrB,OAQqB;IAAA,IARrB,EAQqB,SARrB,EAQqB;IAAA,IARrB,iBAQqB,SARrB,iBAQqB;IAAA,IARrB,kBAQqB,SARrB,kBAQqB;IAAA,IAD1BC,IAC0B;;IAC7B,IAAIC,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IAAJ,EAAA,EAAiC;MAG/B,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;QAEE,EAAE,EAFJ,EAAA;QAGE,KAAK,EAAE,CAACC,MAAM,CAAP,MAAA,EAHT,KAGS,CAHT;QAIE,OAAO,EAAGC,iBAAAA,CAAD,EAAY;UACnB,IACE,EAAEA,CAAC,CAADA,OAAAA,IAAaA,CAAC,CAAdA,MAAAA,IAAyBA,CAAC,CAA1BA,OAAAA,IAAsCA,CAAC,CAAzC,QAAA,MACCA,CAAC,CAADA,MAAAA,IAAAA,IAAAA,IAAoBA,CAAC,CAADA,MAAAA,KAFvB,CACE,CADF,EAGE;YACAA,CAAC,CAADA,cAAAA;YACAC,QAAO,KAAPA,IAAAA,IAAAA,QAAO,KAAA,KAAPA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAO,CAAPA,CAAO,CAAPA;UACD;QACF;MAZH,CAAA,CAAA,EADF,QACE,CADF;IAHF,CAAA,MAqBO;MACL,OACE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;QAEE,iBAAiB,EAFnB,iBAAA;QAGE,kBAAkB,EAHpB,kBAAA;QAIE,OAAO,EAAEA;MAJX,CAAA,CAAA,EAME,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;QAAM,KAAK,EAAEC;MAAb,CAAA,EAPJ,QAOI,CANF,CADF;IAUD;EAjDoC,CAiE/B;EAAA,IAjE+B,kBAiE/B,QAjE+B,kBAiE/B;EAAA,IAjE+B,MAiE/B,QAjE+B,MAiE/B;EAAA,IAjE+B,OAiE/B,QAjE+B,OAiE/B;EAAA,IAjE+B,WAiE/B,QAjE+B,WAiE/B;EAAA,IAjE+B,UAiE/B,QAjE+B,UAiE/B;EAAA,IAjE+B,qBAiE/B,QATRC,eASQ;EAAA,IAjE+B,uBAiE/B,QARRC,iBAQQ;EAAA,iCAPRC,qBAOQ;EAAA,IAPRA,qBAOQ,sCAjE+B,aAiE/B;EAAA,iCANRC,uBAMQ;EAAA,IANRA,uBAMQ,sCAjE+B,aAiE/B;EAAA,0BALRC,SAKQ;EAAA,IALRA,SAKQ,+BAjE+B,IAiE/B;EAAA,IAjE+B,gBAiE/B,QAjE+B,gBAiE/B;EAAA,IAjE+B,UAiE/B,QAjE+B,UAiE/B;EAAA,IAjE+B,SAiE/B,QAjE+B,SAiE/B;EAAA,IADRL,KACQ,QADRA,KACQ;;EACR,gBAAmBO,QAAnB,EAAA;EAAA,IAAQD,MAAR,aAAQA,MAAR;;EAEA,IAAML,eAAe,GACnBO,qBAAqB,KAArBA,SAAAA,GACIF,MAAM,CADVE,OAAAA,GADF,qBAAA;EAKA,IAAMN,iBAAiB,GACrBO,uBAAuB,KAAvBA,SAAAA,GACIC,KAAK,CAACJ,MAAM,CAAZI,IAAK,CAALA,CAAAA,GAAAA,CAAuBA,KAAK,CAACJ,MAAM,CAAnCI,IAA4B,CAA5BA,EAAAA,GAAAA,EADJD,GACIC,EADJD,GADF,uBAAA;;EAKA,IAAME,WAAW,GAAG,SAAdA,WAAc,QAAuC;IAAA,IAApCC,OAAoC,SAApCA,OAAoC;;IACzD,IAAIP,SAAS,KAAb,KAAA,EAAyB;MACvB,OAAA,IAAA;IACD;;IAED,IAAMQ,KAAK,GAAGD,OAAO,GAAA,eAAA,GAArB,iBAAA;;IAEA,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;MAC7B,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;QACE,aAAa,EADf,CAAA;QAEE,KAAK,EAAE,CACLf,MAAM,CADD,KAAA,EAEL;UAAEgB,KAAAA,EAAAA;QAAF,CAFK,EAGLC,UAAU,GAAGjB,MAAM,CAAT,WAAA,GAAwBA,MAAM,CAHnC,YAAA,EAFT,UAES,CAFT;QAQE,gBAAgB,EAAEkB;MARpB,CAAA,EADF,KACE,CADF;IAcD;;IAED,OAAOC,KAAK,CAAC;MACXJ,OADW,EACXA,OADW;MAEXC,KAFW,EAEXA,KAFW;MAGXI,QAAQ,EAAEH,UAAU,GAAA,aAAA,GAAmB;IAH5B,CAAD,CAAZ;EAxBF,CAAA;;EA+BA,IAAMI,UAAU,GAAG,SAAbA,UAAa,QAAuC;IAAA,IAApCN,OAAoC,SAApCA,OAAoC;;IACxD,IAAIO,IAAI,KAAR,SAAA,EAAwB;MACtB,OAAA,IAAA;IACD;;IAED,IAAMC,aAAa,GAAGR,OAAO,GAAA,CAAA,GAA7B,CAAA;IACA,IAAMS,eAAe,GAAGT,OAAO,GAAA,CAAA,GAA/B,CAAA;IAEA,OACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;MACE,KAAK,EADP,KAAA;MAEE,UAAU,EAFZ,UAAA;MAGE,KAAK,EAHP,KAAA;MAIE,UAAU,EAJZ,UAAA;MAKE,aAAa,EALf,aAAA;MAME,eAAe,EANjB,eAAA;MAOE,eAAe,EAPjB,eAAA;MAQE,iBAAiB,EARnB,iBAAA;MASE,UAAU,EATZ,IAAA;MAUE,KAAK,EAAEU;IAVT,CAAA,CADF;EARF,CAAA;;EAwBA,IAAMC,KAAK,GAAG;IAAEC,KAAF,EAAEA,KAAF;IAASZ,OAAAA,EAAAA;EAAT,CAAd;EAEA,IAAMa,eAAe,GAAGb,OAAO,GAAA,qBAAA,GAA/B,uBAAA;EAIA,OAAOlB,MAAM,CAAC;IACZgC,EADY,EACZA,EADY;IAEZ3B,OAFY,EAEZA,OAFY;IAGZ4B,WAHY,EAGZA,WAHY;IAIZC,MAJY,EAIZA,MAJY;IAKZC,kBALY,EAKZA,kBALY;IAMZC,iBAAiB,EANL,QAAA;IAOZC,kBAAkB,EAAE;MAAEC,QAAQ,EAAEpB;IAAZ,CAPR;IASZqB,mBAAmB,EAAErB,OAAO,GAAG,CAAH,UAAG,CAAH,GAThB,EAAA;IAUZZ,KAAK,EAAE,CACLH,MAAM,CADD,GAAA,EAEL;MAAE4B,eAAAA,EAAAA;IAAF,CAFK,EAGLX,UAAU,GAAGjB,MAAM,CAAT,YAAA,GAAyBA,MAAM,CAHpC,WAAA,EAVK,KAUL,CAVK;IAgBZqC,QAAQ,EACN,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA,IAAA,EACGhB,UAAU,CADb,KACa,CADb,EAEGP,WAAW,CAFd,KAEc,CAFd;EAjBU,CAAD,CAAb;AAuBD;AAED,IAAMd,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BsC,GAAG,EAAE;IACHC,IAAI,EADD,CAAA;IAEHC,UAAU,EAAE;EAFT,CAD0B;EAK/BC,WAAW,EAAE;IACXC,cAAc,EADH,UAAA;IAEXC,aAAa,EAAE;EAFJ,CALkB;EAS/BC,YAAY,EAAE;IACZF,cAAc,EADF,QAAA;IAEZC,aAAa,EAAE;EAFH,CATiB;EAa/BxB,KAAK,EAAE;IACL0B,SAAS,EADJ,QAAA;IAELjB,eAAe,EAAE;EAFZ,CAbwB;EAiB/BkB,YAAY,EAAE;IACZC,QAAQ,EAAE;EADE,CAjBiB;EAoB/BC,WAAW,EAAE;IACXD,QAAQ,EADG,EAAA;IAEXE,UAAU,EAFC,EAAA;IAGXC,SAAS,EAAE;EAHA,CApBkB;EAyB/BrD,MAAM,EAAE;IACNsD,OAAO,EAAE;EADH;AAzBuB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { Link, Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport TabBarIcon from './TabBarIcon';\nimport type { BottomTabBarButtonProps, LabelPosition } from '../types';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n      }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  badge?: number | string;\n  /**\n   * Custom style for the badge.\n   */\n  badgeStyle?: StyleProp<TextStyle>;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press in React Native.\n   * On the web, this will use onClick.\n   */\n  onPress: (\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the icon element.\n   */\n  iconStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  badge,\n  badgeStyle,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    accessibilityState,\n    ...rest\n  }: BottomTabBarButtonProps) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return (\n        <Link\n          {...rest}\n          to={to}\n          style={[styles.button, style]}\n          onPress={(e: any) => {\n            if (\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n              (e.button == null || e.button === 0) // ignore everything but left clicks\n            ) {\n              e.preventDefault();\n              onPress?.(e);\n            }\n          }}\n        >\n          {children}\n        </Link>\n      );\n    } else {\n      return (\n        <TouchableWithoutFeedback\n          {...rest}\n          accessibilityRole={accessibilityRole}\n          accessibilityState={accessibilityState}\n          onPress={onPress}\n        >\n          <View style={style}>{children}</View>\n        </TouchableWithoutFeedback>\n      );\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Text>\n      );\n    }\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n    });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        horizontal={horizontal}\n        badge={badge}\n        badgeStyle={badgeStyle}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={iconStyle}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityState: { selected: focused },\n    // @ts-expect-error: keep for compatibility with older React Native versions\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}