{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isVisible\", \"children\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Screen, screensEnabled, shouldUseActivityState } from 'react-native-screens';\nvar FAR_FAR_AWAY = 30000;\nexport default function ResourceSavingScene(_ref) {\n  var isVisible = _ref.isVisible,\n      children = _ref.children,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (screensEnabled !== null && screensEnabled !== void 0 && screensEnabled() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return React.createElement(Screen, _extends({\n        activityState: isVisible ? 2 : 0,\n        style: style\n      }, rest), children);\n    } else {\n      return React.createElement(Screen, _extends({\n        active: isVisible ? 1 : 0,\n        style: style\n      }, rest), children);\n    }\n  }\n\n  if (Platform.OS === 'web') {\n    return React.createElement(View, _extends({\n      hidden: !isVisible,\n      style: [{\n        display: isVisible ? 'flex' : 'none'\n      }, styles.container, style],\n      pointerEvents: isVisible ? 'auto' : 'none'\n    }, rest), children);\n  }\n\n  return React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: isVisible ? 'auto' : 'none'\n  }, React.createElement(View, {\n    collapsable: false,\n    removeClippedSubviews: Platform.OS === 'ios' ? !isVisible : true,\n    pointerEvents: isVisible ? 'auto' : 'none',\n    style: isVisible ? styles.attached : styles.detached\n  }, children));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["FAR_FAR_AWAY","rest","screensEnabled","Platform","isVisible","style","display","styles","detached","container","flex","overflow","attached","top"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAEA,SAAA,MAAA,EAAA,cAAA,EAAA,sBAAA,QAAA,sBAAA;AAcA,IAAMA,YAAY,GAAlB,KAAA;AAEA,eAAe,SAAA,mBAAA,OAKL;EAAA,IALkC,SAKlC,QALkC,SAKlC;EAAA,IALkC,QAKlC,QALkC,QAKlC;EAAA,IALkC,KAKlC,QALkC,KAKlC;EAAA,IADLC,IACK;;EAER,IAAIC,cAAc,KAAdA,IAAAA,IAAAA,cAAc,KAAA,KAAdA,CAAAA,IAAAA,cAAc,EAAdA,IAAsBC,QAAQ,CAARA,EAAAA,KAA1B,KAAA,EAAiD;IAC/C,IAAA,sBAAA,EAA4B;MAC1B,OAEE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;QAAQ,aAAa,EAAEC,SAAS,GAAA,CAAA,GAAhC,CAAA;QAA0C,KAAK,EAAEC;MAAjD,CAAA,EAAA,IAAA,CAAA,EAAA,QAAA,CAFF;IADF,CAAA,MAOO;MACL,OAEE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;QAAQ,MAAM,EAAED,SAAS,GAAA,CAAA,GAAzB,CAAA;QAAmC,KAAK,EAAEC;MAA1C,CAAA,EAAA,IAAA,CAAA,EAAA,QAAA,CAFF;IAMD;EACF;;EAED,IAAIF,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;IACzB,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;MAEE,MAAM,EAAE,CAFV,SAAA;MAGE,KAAK,EAAE,CACL;QAAEG,OAAO,EAAEF,SAAS,GAAA,MAAA,GAAY;MAAhC,CADK,EAELG,MAAM,CAFD,SAAA,EAHT,KAGS,CAHT;MAQE,aAAa,EAAEH,SAAS,GAAA,MAAA,GAAY;IARtC,CAAA,EAAA,IAAA,CAAA,EADF,QACE,CADF;EAeD;;EAED,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IACE,KAAK,EAAE,CAACG,MAAM,CAAP,SAAA,EADT,KACS,CADT;IAGE,aAAa,EAAEH,SAAS,GAAA,MAAA,GAAY;EAHtC,CAAA,EAKE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IACE,WAAW,EADb,KAAA;IAEE,qBAAqB,EAGnBD,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAwB,CAAxBA,SAAAA,GALJ,IAAA;IAOE,aAAa,EAAEC,SAAS,GAAA,MAAA,GAP1B,MAAA;IAQE,KAAK,EAAEA,SAAS,GAAGG,MAAM,CAAT,QAAA,GAAqBA,MAAM,CAACC;EAR9C,CAAA,EANJ,QAMI,CALF,CADF;AAoBD;AAED,IAAMD,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BE,SAAS,EAAE;IACTC,IAAI,EADK,CAAA;IAETC,QAAQ,EAAE;EAFD,CADoB;EAK/BC,QAAQ,EAAE;IACRF,IAAI,EAAE;EADE,CALqB;EAQ/BF,QAAQ,EAAE;IACRE,IAAI,EADI,CAAA;IAERG,GAAG,EAAEb;EAFG;AARqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  isVisible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  // react-native-screens is buggy on web\n  if (screensEnabled?.() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen activityState={isVisible ? 2 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen active={isVisible ? 1 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    }\n  }\n\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!isVisible}\n        style={[\n          { display: isVisible ? 'flex' : 'none' },\n          styles.container,\n          style,\n        ]}\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, style]}\n      // box-none doesn't seem to work properly on Android\n      pointerEvents={isVisible ? 'auto' : 'none'}\n    >\n      <View\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        style={isVisible ? styles.attached : styles.detached}\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}