{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { NavigationHelpersContext, useTheme } from '@react-navigation/native';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\nimport SafeAreaProviderCompat, { initialSafeAreaInsets } from \"./SafeAreaProviderCompat\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport BottomTabBar, { getTabBarHeight } from \"./BottomTabBar\";\nimport BottomTabBarHeightCallbackContext from \"../utils/BottomTabBarHeightCallbackContext\";\nimport BottomTabBarHeightContext from \"../utils/BottomTabBarHeightContext\";\n\nfunction SceneContent(_ref) {\n  var isFocused = _ref.isFocused,\n      children = _ref.children,\n      style = _ref.style;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  return React.createElement(View, {\n    accessibilityElementsHidden: !isFocused,\n    importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n    style: [styles.content, {\n      backgroundColor: colors.background\n    }, style]\n  }, children);\n}\n\nvar BottomTabView = function (_React$Component) {\n  _inherits(BottomTabView, _React$Component);\n\n  var _super = _createSuper(BottomTabView);\n\n  function BottomTabView(_props) {\n    var _this;\n\n    _classCallCheck(this, BottomTabView);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"renderTabBar\", function () {\n      var _this$props = _this.props,\n          _this$props$tabBar = _this$props.tabBar,\n          tabBar = _this$props$tabBar === void 0 ? function (props) {\n        return React.createElement(BottomTabBar, props);\n      } : _this$props$tabBar,\n          tabBarOptions = _this$props.tabBarOptions,\n          state = _this$props.state,\n          navigation = _this$props.navigation,\n          descriptors = _this$props.descriptors;\n      return tabBar(_objectSpread(_objectSpread({}, tabBarOptions), {}, {\n        state: state,\n        descriptors: descriptors,\n        navigation: navigation\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTabBarHeightChange\", function (height) {\n      _this.setState(function (state) {\n        if (state.tabBarHeight !== height) {\n          return {\n            tabBarHeight: height\n          };\n        }\n\n        return null;\n      });\n    });\n\n    var _this$props2 = _this.props,\n        _state = _this$props2.state,\n        _tabBarOptions = _this$props2.tabBarOptions;\n    var dimensions = Dimensions.get('window');\n    var tabBarHeight = getTabBarHeight({\n      state: _state,\n      dimensions: dimensions,\n      layout: {\n        width: dimensions.width,\n        height: 0\n      },\n      insets: initialSafeAreaInsets,\n      adaptive: _tabBarOptions === null || _tabBarOptions === void 0 ? void 0 : _tabBarOptions.adaptive,\n      labelPosition: _tabBarOptions === null || _tabBarOptions === void 0 ? void 0 : _tabBarOptions.labelPosition,\n      tabStyle: _tabBarOptions === null || _tabBarOptions === void 0 ? void 0 : _tabBarOptions.tabStyle,\n      style: _tabBarOptions === null || _tabBarOptions === void 0 ? void 0 : _tabBarOptions.style\n    });\n    _this.state = {\n      loaded: [_state.routes[_state.index].key],\n      tabBarHeight: tabBarHeight\n    };\n    return _this;\n  }\n\n  _createClass(BottomTabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          state = _this$props3.state,\n          descriptors = _this$props3.descriptors,\n          navigation = _this$props3.navigation,\n          lazy = _this$props3.lazy,\n          _this$props3$detachIn = _this$props3.detachInactiveScreens,\n          detachInactiveScreens = _this$props3$detachIn === void 0 ? true : _this$props3$detachIn,\n          sceneContainerStyle = _this$props3.sceneContainerStyle;\n      var routes = state.routes;\n      var _this$state = this.state,\n          loaded = _this$state.loaded,\n          tabBarHeight = _this$state.tabBarHeight;\n      var isScreensEnabled = (screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) && detachInactiveScreens;\n      return React.createElement(NavigationHelpersContext.Provider, {\n        value: navigation\n      }, React.createElement(SafeAreaProviderCompat, null, React.createElement(ScreenContainer, {\n        enabled: isScreensEnabled,\n        style: styles.container\n      }, routes.map(function (route, index) {\n        var descriptor = descriptors[route.key];\n        var unmountOnBlur = descriptor.options.unmountOnBlur;\n        var isFocused = state.index === index;\n\n        if (unmountOnBlur && !isFocused) {\n          return null;\n        }\n\n        if (lazy && !loaded.includes(route.key) && !isFocused) {\n          return null;\n        }\n\n        return React.createElement(ResourceSavingScene, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          isVisible: isFocused,\n          enabled: isScreensEnabled\n        }, React.createElement(SceneContent, {\n          isFocused: isFocused,\n          style: sceneContainerStyle\n        }, React.createElement(BottomTabBarHeightContext.Provider, {\n          value: tabBarHeight\n        }, descriptor.render())));\n      })), React.createElement(BottomTabBarHeightCallbackContext.Provider, {\n        value: this.handleTabBarHeightChange\n      }, this.renderTabBar())));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var focusedRouteKey = nextProps.state.routes[nextProps.state.index].key;\n      return {\n        loaded: prevState.loaded.includes(focusedRouteKey) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [focusedRouteKey])\n      };\n    }\n  }]);\n\n  return BottomTabView;\n}(React.Component);\n\nexport { BottomTabView as default };\n\n_defineProperty(BottomTabView, \"defaultProps\", {\n  lazy: true\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["BottomTabView.tsx"],"names":["style","colors","useTheme","isFocused","styles","backgroundColor","background","BottomTabView","React","lazy","focusedRouteKey","nextProps","loaded","prevState","constructor","state","tabBarOptions","dimensions","Dimensions","tabBarHeight","getTabBarHeight","layout","width","height","insets","adaptive","labelPosition","tabStyle","tabBar","props","descriptors","navigation","render","detachInactiveScreens","sceneContainerStyle","routes","isScreensEnabled","container","descriptor","route","unmountOnBlur","StyleSheet","handleTabBarHeightChange","flex","overflow","content"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Dimensions,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  NavigationHelpersContext,\n  ParamListBase,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\n\nimport SafeAreaProviderCompat, {\n  initialSafeAreaInsets,\n} from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport BottomTabBar, { getTabBarHeight } from './BottomTabBar';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport BottomTabBarHeightContext from '../utils/BottomTabBarHeightContext';\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabDescriptorMap,\n  BottomTabNavigationHelpers,\n  BottomTabBarProps,\n} from '../types';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n};\n\ntype State = {\n  loaded: string[];\n  tabBarHeight: number;\n};\n\nfunction SceneContent({\n  isFocused,\n  children,\n  style,\n}: {\n  isFocused: boolean;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n}) {\n  const { colors } = useTheme();\n\n  return (\n    <View\n      accessibilityElementsHidden={!isFocused}\n      importantForAccessibility={isFocused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.content, { backgroundColor: colors.background }, style]}\n    >\n      {children}\n    </View>\n  );\n}\n\nexport default class BottomTabView extends React.Component<Props, State> {\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const focusedRouteKey = nextProps.state.routes[nextProps.state.index].key;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(focusedRouteKey)\n        ? prevState.loaded\n        : [...prevState.loaded, focusedRouteKey],\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { state, tabBarOptions } = this.props;\n\n    const dimensions = Dimensions.get('window');\n    const tabBarHeight = getTabBarHeight({\n      state,\n      dimensions,\n      layout: { width: dimensions.width, height: 0 },\n      insets: initialSafeAreaInsets,\n      adaptive: tabBarOptions?.adaptive,\n      labelPosition: tabBarOptions?.labelPosition,\n      tabStyle: tabBarOptions?.tabStyle,\n      style: tabBarOptions?.style,\n    });\n\n    this.state = {\n      loaded: [state.routes[state.index].key],\n      tabBarHeight: tabBarHeight,\n    };\n  }\n\n  private renderTabBar = () => {\n    const {\n      tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n      tabBarOptions,\n      state,\n      navigation,\n      descriptors,\n    } = this.props;\n    return tabBar({\n      ...tabBarOptions,\n      state: state,\n      descriptors: descriptors,\n      navigation: navigation,\n    });\n  };\n\n  private handleTabBarHeightChange = (height: number) => {\n    this.setState((state) => {\n      if (state.tabBarHeight !== height) {\n        return { tabBarHeight: height };\n      }\n\n      return null;\n    });\n  };\n\n  render() {\n    const {\n      state,\n      descriptors,\n      navigation,\n      lazy,\n      detachInactiveScreens = true,\n      sceneContainerStyle,\n    } = this.props;\n    const { routes } = state;\n    const { loaded, tabBarHeight } = this.state;\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <SafeAreaProviderCompat>\n          <ScreenContainer\n            // @ts-ignore\n            enabled={isScreensEnabled}\n            style={styles.container}\n          >\n            {routes.map((route, index) => {\n              const descriptor = descriptors[route.key];\n              const { unmountOnBlur } = descriptor.options;\n              const isFocused = state.index === index;\n\n              if (unmountOnBlur && !isFocused) {\n                return null;\n              }\n\n              if (lazy && !loaded.includes(route.key) && !isFocused) {\n                // Don't render a screen if we've never navigated to it\n                return null;\n              }\n\n              return (\n                <ResourceSavingScene\n                  key={route.key}\n                  style={StyleSheet.absoluteFill}\n                  isVisible={isFocused}\n                  enabled={isScreensEnabled}\n                >\n                  <SceneContent\n                    isFocused={isFocused}\n                    style={sceneContainerStyle}\n                  >\n                    <BottomTabBarHeightContext.Provider value={tabBarHeight}>\n                      {descriptor.render()}\n                    </BottomTabBarHeightContext.Provider>\n                  </SceneContent>\n                </ResourceSavingScene>\n              );\n            })}\n          </ScreenContainer>\n          <BottomTabBarHeightCallbackContext.Provider\n            value={this.handleTabBarHeightChange}\n          >\n            {this.renderTabBar()}\n          </BottomTabBarHeightCallbackContext.Provider>\n        </SafeAreaProviderCompat>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}